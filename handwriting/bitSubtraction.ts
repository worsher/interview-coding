/**
 * 使用位运算实现减法
 * 原理：
 * 1. 使用异或(^)计算不考虑借位的差
 * 2. 使用非(~)、与(&)和左移(<<)计算借位
 * 3. 将借位加到结果中，直到没有借位为止
 * 
 * 例如：8 - 3
 * 8 = 1000
 * 3 = 0011
 * 第一步：1000 ^ 0011 = 1011 (不考虑借位的差)
 * 第二步：(~1000 & 0011) << 1 = 0110 (借位)
 * 第三步：1011 ^ 0110 = 1101 (新的差)
 * 第四步：(~1011 & 0110) << 1 = 0000 (新的借位)
 * 第五步：1101 ^ 0000 = 1101 (5)
 * 
 * @param a 被减数
 * @param b 减数
 * @returns 两数之差
 */
function bitSubtraction(a: number, b: number): number {
    while (b !== 0) {
        // 计算借位：使用非运算和与运算找出需要借位的位，然后左移1位
        const borrow = (~a) & b;
        // 计算不考虑借位的差：使用异或运算
        a = a ^ b;
        // 将借位赋值给b，继续循环直到没有借位
        b = borrow << 1;
    }
    return a;
}

// 测试用例
console.log(bitSubtraction(8, 3));  // 输出: 5
console.log(bitSubtraction(20, 10)); // 输出: 10 