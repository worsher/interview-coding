/**
 * 使用位运算实现加法
 * 原理：
 * 1. 使用异或(^)计算不考虑进位的和
 * 2. 使用与(&)和左移(<<)计算进位
 * 3. 将进位加到结果中，直到没有进位为止
 * 
 * 例如：5 + 3
 * 5 = 0101
 * 3 = 0011
 * 第一步：0101 ^ 0011 = 0110 (不考虑进位的和)
 * 第二步：(0101 & 0011) << 1 = 0010 (进位)
 * 第三步：0110 ^ 0010 = 0100 (新的和)
 * 第四步：(0110 & 0010) << 1 = 0100 (新的进位)
 * 第五步：0100 ^ 0100 = 0000 (最终和)
 * 第六步：(0100 & 0100) << 1 = 1000 (最终进位)
 * 第七步：0000 ^ 1000 = 1000 (8)
 * 
 * @param a 第一个数
 * @param b 第二个数
 * @returns 两数之和
 */
function bitAddition(a: number, b: number): number {
    while (b !== 0) {
        // 计算进位：使用与运算找出需要进位的位，然后左移1位
        const carry = (a & b) << 1;
        // 计算不考虑进位的和：使用异或运算
        a = a ^ b;
        // 将进位赋值给b，继续循环直到没有进位
        b = carry;
    }
    return a;
}

// 测试用例
console.log(bitAddition(5, 3));  // 输出: 8
console.log(bitAddition(10, 20)); // 输出: 30 